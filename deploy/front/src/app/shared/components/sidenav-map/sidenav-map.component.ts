import { Component, EventEmitter, Output } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { map, startWith } from 'rxjs';
import { FullCity } from '../../models/city.model';
import { SelectInput } from '../../models/input.model';
import { ResponseItems } from '../../models/response.model';
import { GeoService } from '../../services/geo.service';
import { InfrastructureService } from '../../services/infrastructure.service';
import { showMessage } from '../../common';
import { MatSnackBar } from '@angular/material/snack-bar';

const LOADING_CITY = '–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...';
const SELECT_CITY = '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥';
const MIN_LENGTH_SUBSTR = 2;

type Field = {
  label: string;
  controlName: string;
  min: number;
  placeholder: string;
  max: number | null;
};

@Component({
  selector: 'app-sidenav-map',
  templateUrl: './sidenav-map.component.html',
  styleUrls: ['./sidenav-map.component.scss'],
})
export class SidenavMapComponent {
  cityControl = new FormControl('');
  currentCity: any = null;

  paramsAlg: FormGroup = new FormGroup({
    hour: new FormControl(8, [
      Validators.required,
      Validators.max(24),
      Validators.min(0),
    ]),
    year: new FormControl(new Date().getFullYear(), [
      Validators.required,
      Validators.max(2100),
      Validators.min(new Date().getFullYear()),
    ]),
  });

  paramsEco: FormGroup = new FormGroup({
    power: new FormControl(60, [Validators.required, Validators.min(0)]),
    cost_service: new FormControl(16, [Validators.required, Validators.min(0)]),
    cost_ev: new FormControl(3000000, [Validators.required, Validators.min(0)]),
    time_charge_hour: new FormControl(0.5, [
      Validators.required,
      Validators.min(0),
      Validators.max(24),
    ]),
  });

  paramsFieldAlg: Field[] = [
    {
      label: '–í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—á.)',
      controlName: 'hour',
      min: 0,
      max: 24,
      placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è',
    },
    {
      label: '–ì–æ–¥ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      controlName: 'year',
      min: new Date().getFullYear(),
      max: 2100,
      placeholder: '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥',
    },
  ];

  paramsFieldEco: Field[] = [
    {
      label: '–ú–æ—â–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏ (–∫–í—Ç.)',
      controlName: 'power',
      min: 0,
      max: null,
      placeholder: '–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å',
    },
    {
      label: '–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏ (—Ä/–∫–í—Ç*—á)',
      controlName: 'cost_service',
      min: 0,
      max: null,
      placeholder: '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å',
    },
    {
      label: '–°—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–∑–∞–ø—Ä–∞–≤–∫–∏ (—Ä.)',
      controlName: 'cost_ev',
      min: 0,
      max: null,
      placeholder: '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å',
    },
    {
      label: '–í—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã (—á.)',
      controlName: 'time_charge_hour',
      min: 0,
      max: null,
      placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è',
    },
  ];

  @Output() selectedCity = new EventEmitter<any>();
  @Output() getEVs = new EventEmitter<any>();
  @Output() getParkingsEvent = new EventEmitter<any>();
  @Output() getEVPredictEvent = new EventEmitter<any>();
  cityInput: SelectInput = {
    type: 'text',
    label: LOADING_CITY,
    formControl: this.cityControl,
    items: [],
    placeholder: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
  };

  constructor(
    private _snackBar: MatSnackBar,
    private geoService: GeoService,
    private infrastructureService: InfrastructureService
  ) {}

  toggleEV = {
    flag: false,
    name: '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–∞–≤–∫–∏',
  };
  toggleParking = {
    flag: false,
    name: '–ü–∞—Ä–∫–æ–≤–∫–∏',
  };
  buttonPredictEVName = '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏';

  executeAction(slide: any) {
    slide.action(slide);
  }

  getExistEVs(slide: any) {
    if (this.currentCity) {
      if (slide.flag) {
        this.infrastructureService
          .GetAllEVStations(this.currentCity.id)
          .subscribe(
            (evs) => {
              this.getEVs.emit(evs.items);
            },
            (err) => {
              if (err.status == 404)
                showMessage(
                  this._snackBar,
                  '–°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòû'
                );
              else
                showMessage(this._snackBar, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏ üòû');
            }
          );
      } else {
        this.getEVs.emit(null);
      }
    }
  }

  getEVPredict() {
    if (this.currentCity) {
      showMessage(this._snackBar, '–ò–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ...');

      const { hour, year } = this.paramsAlg.value;
      const { power, cost_service, cost_ev, time_charge_hour } =
        this.paramsEco.value;
      this.infrastructureService
        .GetAllPredictEVs(
          this.currentCity.id,
          hour,
          year,
          power,
          cost_service,
          cost_ev,
          time_charge_hour
        )
        .subscribe(
          (evs: any) => {
            if (evs.length > 0)
              showMessage(this._snackBar, '–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            else
              showMessage(
                this._snackBar,
                '–ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–∞–≤–∫–∞—Ö'
              );
            this.getEVPredictEvent.emit(evs);
          },
          (e) => {
            console.log(e);
            if (e.error && e.error.detail)
              showMessage(this._snackBar, e.error.detail);
            else
              showMessage(this._snackBar, '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–∞–ø—Ä–∞–≤–∫–∏ üòû');
          }
        );
    }
  }

  getParkings(slide: any) {
    if (this.currentCity) {
      if (slide.flag) {
        showMessage(this._snackBar, '–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–∞—Ä–∫–æ–≤–æ–∫...');
        this.infrastructureService
          .GetAllParkings(this.currentCity.id)
          .subscribe(
            (evs: any) => {
              this.getParkingsEvent.emit(evs.items);
            },
            (err) => {
              if (err.status == 404)
                showMessage(this._snackBar, '–ü–∞—Ä–∫–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòû');
              else
                showMessage(this._snackBar, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∫–æ–≤–∫–∏ üòû');
            }
          );
      } else {
        this.getParkingsEvent.emit(null);
      }
    }
  }

  addCitiesToInput(items: FullCity[]) {
    this.cityInput.items = items;
    this.cityInput.label = SELECT_CITY;
    this.cityInput.values = this.compile_values(this.cityInput);
  }

  ngOnInit() {
    this.geoService
      .GetAllCities(true)
      .subscribe((result: ResponseItems<FullCity>) => {
        this.addCitiesToInput(result.items);
      });
  }
  private _filterValues(value: any, items: any[]) {
    let res = items.filter((item) =>
      item.name.toLowerCase().includes(value.toLowerCase())
    );
    return res;
  }

  compile_values(input: SelectInput) {
    return input.formControl.valueChanges.pipe(
      startWith(''),
      map((value) =>
        value ? this._filterValues(value, input.items) : input.items.slice()
      )
    );
  }

  onKeydown(event: any) {
    if (event.key === 'Enter') {
      let city = this._filterValues(
        this.cityInput.formControl.value,
        this.cityInput.items
      )[0];
      this.selectCity(city);
    }
  }

  selectCity(city: FullCity) {
    if (
      city &&
      ((this.currentCity && city.name != this.currentCity.name) ||
        !this.currentCity)
    ) {
      this.currentCity = city;
      this.toggleEV.flag = false;
      this.toggleParking.flag = false;
      this.selectedCity.emit(city);
    }
  }

  onKeyup(input: SelectInput) {
    let v: string = input.formControl.value;
    if (v) {
      if (v.length > MIN_LENGTH_SUBSTR) {
        this.cityInput.label = LOADING_CITY;
        this.geoService
          .GetAllCities(false, v)
          .subscribe((result: ResponseItems<FullCity>) => {
            this.addCitiesToInput(result.items);
          });
      }
    }
  }
}
